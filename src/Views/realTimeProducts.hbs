<h1>Productos en Tiempo Real</h1>

<form id="productForm" action="/api/products" method="POST" enctype="multipart/form-data">
  <input type="text" name="title" placeholder="T√≠tulo" required />
  <input type="text" name="description" placeholder="Descripci√≥n" />
  <input type="text" name="code" placeholder="C√≥digo" required />
  <input type="number" name="price" placeholder="Precio" required />
  <input type="number" name="stock" placeholder="Stock" required />
  <input type="text" name="category" placeholder="Categor√≠a" />
  <input type="file" name="imagen" />
  <button type="submit">Agregar producto</button>
</form>

<ul id="productList">
  {{#each products}}
    <li data-id="{{id}}">
      <h3>{{title}}</h3>
      <p>{{description}}</p>
      <p>Precio: ${{price}}</p>
      <p>C√≥digo: {{code}}</p>
      <p>Stock: {{stock}}</p>
      <p>Categor√≠a: {{category}}</p>
      {{#if thumbnails.[0]}}
        <img src="{{thumbnails.[0]}}" alt="{{title}}" width="150">
      {{else}}
        <em>Sin imagen</em>
      {{/if}}
      <button class="deleteBtn" onclick="deleteProduct('{{_id}}')">Eliminar</button>

    </li>
  {{/each}}
</ul>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const productsList = document.getElementById("productList");
  const productForm = document.getElementById("productForm");

  // Funci√≥n para eliminar producto
  function deleteProduct(id) {
    socket.emit("deleteProduct", id);
  }

  // Renderizar productos recibidos v√≠a socket (actualizaciones en tiempo real)
  socket.on("updateProducts", (products) => {
    productsList.innerHTML = "";
    products.forEach(p => {
      const li = document.createElement("li");
      li.setAttribute("data-id", p.id);
      li.innerHTML = `
        <h3>${p.title}</h3>
        <p>${p.description}</p>
        <p>Precio: $${p.price}</p>
        <p>C√≥digo: ${p.code}</p>
        <p>Stock: ${p.stock}</p>
        <p>Categor√≠a: ${p.category}</p>
        ${p.thumbnails && p.thumbnails[0] ? `<img src="${p.thumbnails[0]}" alt="${p.title}" width="150">` : "<em>Sin imagen</em>"}
        <button class="deleteBtn" onclick="deleteProduct('${p.id}')">Eliminar</button>
      `;
      productsList.appendChild(li);
    });
  });

  // Enviar nuevo producto
  productForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(productForm);

    try {
      const res = await fetch("/api/products", {
        method: "POST",
        body: formData
      });
      const data = await res.json().catch(() => ({}));

      if (res.ok) {
        console.log("‚úÖ Producto agregado:", data);
        productForm.reset();
      } else {
        console.error("‚ùå Error al agregar producto:", data);
      }
    } catch (err) {
      console.error("üí• Error en fetch:", err);
    }
  });
</script>
